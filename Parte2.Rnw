\documentclass[10pt,a4paper]{article}
\usepackage[latin1]{inputenc}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\author{Lilian Martínez}
\title{Parte II Guias Practicas de R}
\begin{document}

\maketitle
\newpage
<<>>=
#Práctica 10-Análisis de una variable bidimensional (categórica, continua)

#EJEMPLO 1
#Crea un vector de datos para cada proceso descrito en el problema. 
A <- c(100,96,92,96,92); A 
B <- c(76,80,75,84,82); B 
C <- c(108,100,96,98,100); C

#Crea una hoja de datos teniendo como componentes (columnas) los tres vectores
Baterias <- data.frame(procesoA=A, procesoB=B, procesoC=C); Baterias 

# Para editar los datos puede utilizar la función fix() 
fix(Baterias)

#Guarda la hoja de datos en un archivo. 
write.table(Baterias, file="Baterias.txt", append=FALSE, quote=TRUE, sep=" ", 
na="NA", col.names=TRUE)

#Elimina todos objetos que existen en el espacio de trabajo (Workspace) 
ls(); rm(list=ls(all=TRUE)); ls()

#Recupera la hoja de datos,para probar si fue guardada. 
Baterias <- read.table("Baterias.txt", header=TRUE); Baterias

#Conecta o adjunta la hoja de datos a la segunda ruta o lista de búsqueda. 
attach(Baterias, pos=2) 
search()

#Dibuja un gráfico horizontal depuntos para los tres procesos. 
stripchart(Baterias, main="Gráfico de puntos para los tres procesos", 
method = "stack", vertical = FALSE, col="blue", pch=1, xlab="Duración (semanas)", ylab="Proceso")

#Muestra un resumen estadístico para los tres procesos. 
summary(Baterias)

#Dibuja un gráfico horizontal de cajas (box-plot) para los tres procesos. 
boxplot(Baterias, width=NULL, varwidth=TRUE,names, add= FALSE, horizontal = TRUE, 
main="Gráfico de caja por proceso", border=par("fg"), col=c("yellow", "cyan", 
"red"), xlab = "Duración (semanas)", ylab="Proceso")

# Vertical 
boxplot(Baterias, width=NULL, varwidth=TRUE,names, add= FALSE, horizontal = FALSE, 
main="Gráfico de caja por proceso", border=par("fg"), col=c("yellow", "cyan",
"red"), xlab = "Duración (semanas)", ylab="Proceso")

#Presenta la matriz de covarianzas muestral. 
options(digits=3)
S <- var(Baterias); S 

# Concatena los tres vectores dentro de un vector simple, junto con un vector factor indicador de 
#la categoría o tratamiento (A, B, C) que origina cada observación.
Baterias <- stack(Baterias); Baterias

# Prueba de igualdad de medias por descomposición de la varianza en dos fuentes de variación:
aov.Baterias <- aov(values~ind, data=Baterias)

# Prueba de igualdad de medias en un diseño de una vía
oneway.test(values~ind, data=Baterias, var.equal = TRUE)

#Deshace la concatenación del vector de valores y el vector indicador de categoría. 
Baterias = unstack(Baterias);Baterias

#Desconecta la hoja de datos de la segunda ruta o lista de búsqueda. 
detach(Baterias, pos=2); search()


#UNIDAD 2: Práctica 10-Análisis de una variable bidimensional (categórica, continua)
#EJEMPLO 2 Suponga que un estudiante hace una encuesta paraevaluar sí los 
#estudiantes que fuman estudian menos que los que no fuman.

#ANÁLISIS ESTADÍSTICO DE LOS DATOS

#Crea dos vectores con los datos.
Fuma = c("Si","No","No","Si","No","Si","Si","Si","No","Si"); Fuma 
Cantidad = c(1,2,2,3,3,1,2,1,3,2); Cantidad

#Crea una hoja de datos que tenga comocomponentes o columnas los dos vectores. 
Estudia <- data.frame(Fuma=Fuma, Cantidad=Cantidad); Estudia

# Puedes editar los datos utilizando 
fix(Estudia)

#Guarda la hoja de datos en un archivo. 
write.table(Estudia, file="Estudia.txt", append=FALSE, quote=TRUE, sep=" ", na="NA",col.names=TRUE)


#Elimina los objetos almacenados enel área de trabajo (Workspace). 
ls() 
rm(list=ls(all=TRUE)) 
ls()

#Recupera desde el archivo la hoja de datos
Estudia <- read.table("Estudia.txt", header=TRUE) 
Estudia

#Conecta la hoja de datos a la segunda ruta o lista de búsqueda, 
attach(Estudia, pos=2) 
search() 

#Crea una tabla de contigencia o de doble entrada. 
tablaCont <- table(Estudia) 
tablaCont

#Calcula las tablas de proporciones o de probabilidades. 
options(digits=3)

# Proporciones basadas en el total de la muestra, la suma de filas y columnas suman 1 
propTotal <- prop.table(tablaCont); propTotal

# Proporciones basadas en el total por fila, cada fila suma 1 
propFila <- prop.table(tablaCont, 1) 
propFila

# Proporciones basadas en el total por columna, cada columna suma 1 
propCol <- prop.table(tablaCont, 2) 
propCol

#Construya los gráficos de barras de la variable bidimensional. 
# Gráfico de barras apiladas con la frecuencia de Cantidad como altura 
barplot(table(Estudia$Cantidad, Estudia$Fuma), beside = FALSE, horizontal=FALSE, main="Gráfico 
de barras (Fuma, Cantidad de horas de estudio)", legend.text =T, xlab="Fuma", ylab="Cantidad de 
horas-estudio")

# Gráfico de barras apiladas con la frecuencia de Fuma como altura 
barplot(table(Estudia$Fuma, Estudia$Cantidad), beside = FALSE, horizontal=FALSE,main="Gráfico 
de barras (Cantidad de horas de estudio,Fuma)", legend.text =T, xlab="Cantidad de horas-estudio", 
ylab="Fuma")

# Gráfico de barras no apiladas y colocación de leyenda 
# Crear un factor para los nombres en la leyenda 
Fuma=factor(Estudia$Fuma); Fuma

barplot(table(Estudia$Cantidad, Estudia$Fuma), main="Gráfico de barras (Fuma, Cantidad de horas 
de estudio)", xlab="Fuma", ylab="Cantidad dehoras-estudio", beside=TRUE, legend.text=T)

barplot(table(Estudia$Cantidad, Estudia$Fuma), main="Gráfico de barras (Fuma, Cantidad de horas 
de estudio)", xlab="Fuma", ylab="Cantidad de horas-estudio", beside=TRUE, 
legend.text=c("menor que 5", "5-10", "mayor que 10"))

# Probabilidades esperadas para la prueba Chi-cuadrada 
chisq.test(tablaCont) $expected


#UNIDAD 3: Práctica 13 - Espacios muestrales

#GENERACIÓN DE ESPACIOS MUESTRALES Y DE MUESTRAS ALEATORIAS.

#Simular 10 lanzamientos de una moneda 
# vector del cual se tomará la muestra 
moneda <- c("C", "+"); moneda

# tamaño de la muestra 
n <- 10; n 

#generando la muestra aleatoria con reemplazamiento
lanzamientos <- sample(moneda, n, replace=TRUE); lanzamientos

#Elegir 6 números de una lotería de 54 números 
# se define el espacio muestral del cual se tomará la muestra
espacio <- 1:54;espacio 
# se define el tamaño de la muestra 
n <- 6; n 

#seleccionando la muestra sin reposición 
muestra <- sample(espacio, n); muestra

#Simular 4 lanzamientos de dos dados 
espacio = as.vector(outer(1:6, 1:6, paste)); espacio

# se define el tamaño de la muestra 
n <- 4; n

# finalmente se selecciona la muestra 
muestra <- sample(espacio, n, replace=TRUE); muestra

#Seleccionar cinco cartas de un naipe de 52 cartas 
naipe = paste(rep(c("A", 2:10, "J", "Q", "K"), 4), 
c("OROS","COPAS", "BASTOS","ESPADAS"));naipe

# se define el tamaño de la muestra 
n <- 5; n 

# se obtiene la muestra sin reemplazo (aunque no se especifique con replace=FALSE) 
cartas <- sample(naipe, n) ; cartas

#Generar una muestra aleatoria de tamaño 120,con los números del 1 al 6 en el que las probabilidades de cada uno de los números son respectivamente los siguientes valores: 0.5, 0.25, 0.15, 0.04, 0.03 y 0.003.
sample(1:6,120,replace=TRUE, c(0.5,0.25,0.15,0.04,0.03,0.03))

#Escriba una función que reciba los números enteros entre 1 y 500 inclusive, la función retornará el 
#espacio formado por los números divisibles entre 7.Después de llamar a esta función se extraerá 
#aleatoriamente 12 de estos números, con reemplazo.

# definiendo la función que generará el espacio formado 
espacio <- function(num) 
{ 
 numDiv7 <- numeric(0) 
 ind <- 0 
 for(i in 1:length(num)) 
   if ((num[i] %% 7)==0) 
    { 
     ind <- ind+1 
     numDiv7[ind]=num[i] 
    } 
 return(numDiv7) 
}
numeros <- 1:500
espacio

# generando el espacio muestral 
s <- espacio(numeros); s

# seleccionando la muestra 
muestra <- sample(s, 12, replace=TRUE); muestra 


#UNIDAD 3: Práctica 14 Distribuciones de probabilidad discreta 
#CÁLCULO DE PROBABILIDADES.

#Ejemplo 1:
#Si un estudiante responde al azar a un examen de 8 preguntas de verdadero o falso. 
#a) ¿Cuál es la probabilidad de que acierte 4?
dbinom(4,8,0.5)

#b) ¿Cuál es la probabilidad de que acierte a lo sumo 2?
x <- 2; n=8; p=1/2
pbinom(x, size = n, prob = p, lower.tail=TRUE)

#c) ¿Cuál es la probabilidad de que acierte 5 o más?
x <- 4; n=8; p=1/2

#primera forma 
F <- 1 - pbinom(x, n, p, lower.tail=TRUE); F
#segunda forma 
pbinom(4, size=8, prob=0.5, lower.tail=FALSE)

#Ejemplo 2: 
#Una cierta área de Estados Unidos es afectada, en promedio, por 6 huracanes al año. 
#Encuentre la probabilidad de que en un determinado año esta área sea afectada por: 

#a) Menos de 4 huracanes.
x <- 3; mu <- 6 
ppois(x, lambda = mu, lower.tail=TRUE)

#b) Entre 6 y 8 huracanes
#primera forma 
sum(dpois(c(6,7,8),lambda = 6))

# segunda forma restar las probabilidades acumuladas
F8 <- ppois(8, lambda = 6, lower.tail=TRUE) 
F5 <- ppois(5,lambda = 6, lower.tail=TRUE) 
F8 - F5

#c) Represente gráficamente la función de probabilidad 
#de la variable aleatoria X que mide el número de huracanes por año.
#n <- 30 
#genera 30 valores de una distribución de Poisson con ??=6
x <- rpois(n, lambda=mu)

#calcula las probabilidades para cada valor generado 
y <- dpois(x, lambda=mu)

#genera el gráfico de distribución 
plot(x, y, xlab="x", ylab="Función de probalidad", 
main="Distribución de Poisson: lambda = 6",type="h")

#une los puntos a las líneas 
points(x, y, pch=21)

#Ejemplo 3: 
#En un juego se disponen 15 globos llenos de agua, delos que 4 tienen premio. Los participantes en el 
#juego, con los ojos vendados, golpean los globos con un bate por orden hasta que cada uno consigue romper2.

#a) ¿Cuál es la probabilidad de que elprimer participante consiga un premio?
# x define el número de globos con premio
x <- 0:2; m = 11; n <- 4; k=2

# se construye la distribución de frecuencias del número de premios 
Tabla <- data.frame(Probabilidad=dhyper(x, m, n, k)) 
rownames(Tabla) <- c("Ningún premio","Solamente uno", "Dos premios") 
Tabla 

#b) Si el primer participante ha conseguido sólo un premio, ¿cuál es la probabilidad de que el 
#segundo participante consiga otro?
x = 1; m= 10; n= 3; k= 2; 
dhyper(x, m, n, k)

#Ejemplo 4: 
#Un vendedor de alarmas de hogar tiene éxito enuna casa de cada diez que visita. 
#Calcula:

#a) La probabilidad de que en un día determinado consiga vender la primera alarma en la sexta 
#casa que visita.
# x define el número de intentos fallidos 
x <- 0:5; p=0.1

# creando la tabla de distribución de frecuencias del número de intentos fallidos antes de 
#obtener la primera venta. 
Tabla <- data.frame(Probabilidad=dgeom(x, prob=p))

# nombrando las filas de la distribución de frecuencias 
rownames(Tabla) <- c("Venta en el primer intento", "Venta en el segundo intento", 
"Venta en el tercer intento", "Venta en el cuarto intento", 
"Venta en el quinto intento", "Venta en el sexto intento") 
Tabla

#b) La probabilidad de que no venda ninguna después de siete viviendas visitadas.
x=0; n=7; p=0.1 
dbinom(x, n, p, log = FALSE)

#c) Si se plantea vender tres alarmas, ¿cuál es la probabilidad deque consiga su objetivo en la 
#octava vivienda que visita?
y <- 0:5; r=3; p <- 0.1 
Tabla <- data.frame(Probabilidad=dnbinom(y, size=r, prob=p)) 
rownames(Tabla) <- 0:5 
Tabla

#GENERACIÓN DE MUESTRAS ALEATORIAS DE LAS DISTRIBUCIONES 
#Ejemplo 1: 
#Generar 100 números aleatorios de una distribución Binomial de parámetros n= 15 ensayos o pruebas 
#y una probabilidad de éxito de 0.25. 
# Definir los parámetros apropiados 
n <- 15; p <- 0.25 

# generar 100 números aleatorios binomiales 
x = rbinom(100, n, p); x 

# Histograma para la muestra aleatoria de tamaño 100 
hist(x, main="X ~ Binomial(n=15, p=0.25)", xlab="X = Número de éxitos", 
ylab="masa de probabilidad", probability=TRUE, col="Cyan")

# Graficar la función de probabilidad teórica, use la función points(), 
#no debe cerrar el gráfico obtenido con la instrucción anterior 
xvals=0:n; points(xvals, dbinom(xvals, n, p), type="h", lwd=3) 
points(xvals, dbinom(xvals, n, p), type="p", lwd=3)

#Ejemplo 2: 
#Generar 100 números aleatorios de una distribución Poisson con 200000 
#ensayos o pruebas y una probabilidad de éxito de 3/100000 

# Definir los parámetros apropiados 
n <- 200000; p <- 3/100000; lambda=n*p 

# generar 100 números aleatorios de la distribución 
x = rpois(100, lambda); x 

# Histograma para la muestra aleatoria de tamaño 100 
hist(x, main=expression(paste("X ~ Poisson( ", lambda, " = 6 )")), xlab="X = Número de eventos a 
una tasa constante", ylab="masa de probabilidad", probability=TRUE, col="pink") 

# Graficar la función de probabilidadteórica, use la función points() 
xvals=0:n; points(xvals, dpois(xvals, lambda), type="h", lwd=3) 
points(xvals, dpois(xvals, lambda), type="p", lwd=3)

#3. GENERACIÓN DE MUESTRAS ALEATORIAS DE LAS DISTRIBUCIONES
#Ejemplo 1: 
#Generar 100 números aleatorios de una distribución Uniforme en [-2, 4] 

#Definir los parámetros apropiados 
min <- -2; max <- 4 

#Generar 100 números aleatorios de la distribución 
x = runif(100, min, max); x 

#Histograma para la nuestra aleatoria de tamaño 100 
hist(x, main="X ~ Uniforme(min=-2, max=4", xlab="X", ylab="densidad de probabilidad", 
     probability=TRUE, col="green") 

#Graficar la función de densidad, use la función curve() para variable continua 
curve(dunif(x, min, max), col="blue", add=TRUE)

#Ejemplo 2: 
#Supongamos que tenemos una muestra de tamañon=200 perteneciente a una población normal 
#N(10,2) con ??=10 y ??=2:

#genera los valores aleatorios de la distribución 
x.norm <- rnorm(n=200,mean=10, sd=2)

# Podemos obtener un histograma usando la función hist() 
hist(x.norm, breaks = "Sturges", freq = TRUE, probability = FALSE, include.lowest = TRUE, 
right= TRUE, density = NULL, angle = 45, col = "steelblue1", border = NULL, 
main = "Histograma de datos observados", axes = TRUE, plot = TRUE, labels = FALSE)

# Podemos estimar la densidad de frecuencia usando la función density() y plot() para dibujar su gráfica 
plot(density(x.norm), main="Densidad estimada de los datos") 

# R permite calcular la función de distribución acumulada teórica con ecdf() 
plot(ecdf(x.norm),main="Función de distribución acumulada teórica")

#Ejemplo 3: 
#Generar 100 números aleatorios de una distribución Normal con media 4.5 y desviación estándar 0.75 

# Definir los parámetros apropiados 
media <- 4.5; desviacion <- 0.75 

# generar 100 números aleatorios de la distribución 
x = rnorm(100, media, desviacion); x 

# Histograma para la nuestra aleatoria de tamaño 100 
hist(x,main=expression(paste("X ~ N(", mu, " = 4.5, ", sigma, " = 0.75)")), 
xlab="X", ylab="densidad de probabilidad", probability=TRUE, col=gray(0.9)) 

# Graficar la función de densidad teórica, usando la función curve() 
curve(dnorm(x, media, desviacion), col="red", lwd=2, add=TRUE)

#Ejemplo 4: 
#Generar números aleatorios de una distribución exponencial. Por ejemplo, si la vida media de un 
#bulbo de luz es 2500 horas, uno puede pensar que el tiempo de vida es aleatorio con una distribución 
#exponencial que tiene media 2500. El único parámetro es la razón = 1/media.

# Definir el parámetro apropiado 
media <- 2500; razon <- 1/media;n=100    

# generar 100 números aleatorios de la distribución 
x = rexp(n, razon); x 

# Histograma para la nuestra aleatoria de tamaño 100 
hist(x, main="X ~ Exponencial( media = 2500 )", xlab="X", 
ylab="densidad de probabilidad", probability=TRUE, col="pink")

# Graficar la función de densidad, usando la función curve() 
curve(dexp(x, razon), col="blue", lwd=2, add=TRUE)

#4. FUNCIONES DE DISTRIBUCIÓN Y SU INVERSA (LOS CUANTILES).
#Ejemplo 1:Para una Variable aleatoria X con distribución normal de media 1 y desviación 
#estándar 1, ¿cuál es la probabilidad de que sea menor que 0.7? 
x <- 0.7 
p <- pnorm(x, mean=1, sd=1, lower.tail = TRUE); p 

#Ejemplo 2:
#Para una variable aleatoria con distribución normal estándar, encontrar P[Z ??? 0.7 ] y P[Z> 0.7].
z <- 0.7 
p1 <- pnorm(z, mean=0, sd=1); p1 
p2 <- pnorm(z, mean=0, sd=1, lower.tail=FALSE); p2 

#Ejemplo 3:
#¿Qué valor de una variable aleatoria con distribución normal estándar, tiene 75% 
#del área a la izquierda?. 
p <- 0.75 
z <- qnorm(p, mean=0, sd=1, lower.tail = TRUE); z 

#Ejemplo 4:
#¿Cuál es la probabilidad a la derecha de 18.55 para una Variable aleatoria X con 
#distribución Chi-cuadrado de 12 grados de libertad? 
x <- 18.55; gl <- 12 
p <- pchisq(x, gl, lower.tail = FALSE); p

#UNIDAD 4: Práctica 17 - Inferencia estadística, Estimación.

#SIMULACIÓN DEL CONCEPTO DE INTERVALO DE CONFIANZA PARA ESTIMAR UN PARÁMETRO. 

#Ejemplo 1. 
#Sea la variable aleatoria X = el número de caras obtenidas, al lanzar una moneda 
#balanceada 20 veces. Simulamos 50 muestras para generar intervalos de 95% de 
#confianza y así poder estimar la proporción verdadera de caras (p), y encontrar 
#en cuántos de estos intervalos se encuentra el verdadero valor de la proporción

simulIntProp <- function(m=5, n=1, p, nivel.conf=0.95) 
{ 
  X <- rbinom(m, n, p) 
  # Matriz con 1000 valores aleatorios binomial(n,p), 50 muestras cada una de tamaño 20 
  pe <<- X/n 
  # Calcula la proporción estimada en cada una de las muestras. 
  SE <<- sqrt(pe*(1-pe)/n) 
  # Calcula la desviación estándarestimada en cada una de las muestras. 
  alfa <- 1-nivel.conf 
  z <<- qnorm(1-alfa/2) 
  Intervalo <<- cbind(pe - z*SE, pe + z*SE) 
  # genera los extremos del intervalo de confianza 
  nInter <<- 0 
  # un contador para conocer en cuántos intervalos se encuentra la verdadera proporción. 
  for(i in 1:m) 
    if ((p >= Intervalo[i, 1]) && (p <= Intervalo[i, 2])) 
      nInter <<- nInter + 1 
  # función que cuenta cuántos intervalos contienen el verdadero valor del parámetro. 
  return(nInter) 
} 
n=20; m= 50; p=0.5; nivel.conf=0.95 
simulIntProp(m, n, p, nivel.conf)

#Gráfico que muestra los intervalosde confianza de 95% que contienen y no contienen el verdadero 
#valor del parámetro p. 
matplot(rbind(pe - z*SE, pe + z*SE), rbind(1:m, 1:m), type="l", lty=1) 
abline(v=p)


#Ejercicio 1. 
#Sea la variable aleatoria X = el número que se obtiene al lanzar un dado no cargado 
#30 veces. Simular 56 muestras para generar intervalos de 95%de confianza para 
#estimar el promedio (??), y encontrar cuántos de estos intervalos contiene el valor 
#medio verdadero.

simulIntProp <- function(m=5, n=1, p, nivel.conf=0.95) 
{ 
  X <- rbinom(m, n, p) 
pe <<- X/n  
SE <<- sqrt(pe*(1-pe)/n)  
alfa <- 1-nivel.conf 
z <<- qnorm(1-alfa/2) 
Intervalo <<- cbind(pe - z*SE, pe + z*SE)
nInter <<- 0 
for(i in 1:m) 
if ((p >= Intervalo[i, 1]) && (p <= Intervalo[i, 2])) nInter <<- nInter + 1 
return(nInter) 
} 
n=30; m= 56; p=0.5; nivel.conf=0.95 
simulIntProp(m, n, p, nivel.conf)

@

\end{document}